// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(NewContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BaseEntityTPCSequence");

            modelBuilder.Entity("WebApplication2.TPC.BaseEntityTPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BaseEntityTPCSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("WebApplication2.TPH.BaseEntityTPH", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntityTPH");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntityTPH");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApplication2.TPT.BaseEntityTPT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntityTPT");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApplication2.TPC.CompanyTPC", b =>
                {
                    b.HasBaseType("WebApplication2.TPC.BaseEntityTPC");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CompanyTPC");
                });

            modelBuilder.Entity("WebApplication2.TPC.PersonTPC", b =>
                {
                    b.HasBaseType("WebApplication2.TPC.BaseEntityTPC");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PersonTPC");
                });

            modelBuilder.Entity("WebApplication2.TPH.CompanyTPH", b =>
                {
                    b.HasBaseType("WebApplication2.TPH.BaseEntityTPH");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CompanyTPH");
                });

            modelBuilder.Entity("WebApplication2.TPH.PersonTPH", b =>
                {
                    b.HasBaseType("WebApplication2.TPH.BaseEntityTPH");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PersonTPH");
                });

            modelBuilder.Entity("WebApplication2.TPT.CompanyTPT", b =>
                {
                    b.HasBaseType("WebApplication2.TPT.BaseEntityTPT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CompanyTPT");
                });

            modelBuilder.Entity("WebApplication2.TPT.PersonTPT", b =>
                {
                    b.HasBaseType("WebApplication2.TPT.BaseEntityTPT");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PersonTPT");
                });

            modelBuilder.Entity("WebApplication2.TPT.CompanyTPT", b =>
                {
                    b.HasOne("WebApplication2.TPT.BaseEntityTPT", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.TPT.CompanyTPT", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.TPT.PersonTPT", b =>
                {
                    b.HasOne("WebApplication2.TPT.BaseEntityTPT", null)
                        .WithOne()
                        .HasForeignKey("WebApplication2.TPT.PersonTPT", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
